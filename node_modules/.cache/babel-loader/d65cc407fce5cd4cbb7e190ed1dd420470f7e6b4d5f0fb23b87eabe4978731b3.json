{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = deepmerge;\nexports.isPlainObject = isPlainObject;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactIs = require(\"react-is\");\n// https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\nfunction isPlainObject(item) {\n  if (typeof item !== 'object' || item === null) {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(item);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);\n}\nfunction deepClone(source) {\n  if (/*#__PURE__*/React.isValidElement(source) || (0, _reactIs.isValidElementType)(source) || !isPlainObject(source)) {\n    return source;\n  }\n  const output = {};\n  Object.keys(source).forEach(key => {\n    output[key] = deepClone(source[key]);\n  });\n  return output;\n}\n\n/**\n * Merge objects deeply.\n * It will shallow copy React elements.\n *\n * If `options.clone` is set to `false` the source object will be merged directly into the target object.\n *\n * @example\n * ```ts\n * deepmerge({ a: { b: 1 }, d: 2 }, { a: { c: 2 }, d: 4 });\n * // => { a: { b: 1, c: 2 }, d: 4 }\n * ````\n *\n * @param target The target object.\n * @param source The source object.\n * @param options The merge options.\n * @param options.clone Set to `false` to merge the source object directly into the target object.\n * @returns The merged object.\n */\nfunction deepmerge(target, source, options = {\n  clone: true\n}) {\n  const output = options.clone ? {\n    ...target\n  } : target;\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (/*#__PURE__*/React.isValidElement(source[key]) || (0, _reactIs.isValidElementType)(source[key])) {\n        output[key] = source[key];\n      } else if (isPlainObject(source[key]) &&\n      // Avoid prototype pollution\n      Object.prototype.hasOwnProperty.call(target, key) && isPlainObject(target[key])) {\n        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.\n        output[key] = deepmerge(target[key], source[key], options);\n      } else if (options.clone) {\n        output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n  return output;\n}","map":{"version":3,"names":["_interopRequireWildcard","require","default","Object","defineProperty","exports","value","deepmerge","isPlainObject","React","_reactIs","item","prototype","getPrototypeOf","Symbol","toStringTag","iterator","deepClone","source","isValidElement","isValidElementType","output","keys","forEach","key","target","options","clone","hasOwnProperty","call"],"sources":["C:/Users/Marcin/Desktop/pokeap/pokeapi-react-app/node_modules/@mui/utils/deepmerge/deepmerge.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = deepmerge;\nexports.isPlainObject = isPlainObject;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactIs = require(\"react-is\");\n// https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\nfunction isPlainObject(item) {\n  if (typeof item !== 'object' || item === null) {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(item);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);\n}\nfunction deepClone(source) {\n  if (/*#__PURE__*/React.isValidElement(source) || (0, _reactIs.isValidElementType)(source) || !isPlainObject(source)) {\n    return source;\n  }\n  const output = {};\n  Object.keys(source).forEach(key => {\n    output[key] = deepClone(source[key]);\n  });\n  return output;\n}\n\n/**\n * Merge objects deeply.\n * It will shallow copy React elements.\n *\n * If `options.clone` is set to `false` the source object will be merged directly into the target object.\n *\n * @example\n * ```ts\n * deepmerge({ a: { b: 1 }, d: 2 }, { a: { c: 2 }, d: 4 });\n * // => { a: { b: 1, c: 2 }, d: 4 }\n * ````\n *\n * @param target The target object.\n * @param source The source object.\n * @param options The merge options.\n * @param options.clone Set to `false` to merge the source object directly into the target object.\n * @returns The merged object.\n */\nfunction deepmerge(target, source, options = {\n  clone: true\n}) {\n  const output = options.clone ? {\n    ...target\n  } : target;\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (/*#__PURE__*/React.isValidElement(source[key]) || (0, _reactIs.isValidElementType)(source[key])) {\n        output[key] = source[key];\n      } else if (isPlainObject(source[key]) &&\n      // Avoid prototype pollution\n      Object.prototype.hasOwnProperty.call(target, key) && isPlainObject(target[key])) {\n        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.\n        output[key] = deepmerge(target[key], source[key], options);\n      } else if (options.clone) {\n        output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n  return output;\n}"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAA+C,CAAC,CAACC,OAAO;AAC9FC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACH,OAAO,GAAGK,SAAS;AAC3BF,OAAO,CAACG,aAAa,GAAGA,aAAa;AACrC,IAAIC,KAAK,GAAGT,uBAAuB,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;AACrD,IAAIS,QAAQ,GAAGT,OAAO,CAAC,UAAU,CAAC;AAClC;AACA,SAASO,aAAaA,CAACG,IAAI,EAAE;EAC3B,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,IAAI,EAAE;IAC7C,OAAO,KAAK;EACd;EACA,MAAMC,SAAS,GAAGT,MAAM,CAACU,cAAc,CAACF,IAAI,CAAC;EAC7C,OAAO,CAACC,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAKT,MAAM,CAACS,SAAS,IAAIT,MAAM,CAACU,cAAc,CAACD,SAAS,CAAC,KAAK,IAAI,KAAK,EAAEE,MAAM,CAACC,WAAW,IAAIJ,IAAI,CAAC,IAAI,EAAEG,MAAM,CAACE,QAAQ,IAAIL,IAAI,CAAC;AAC3K;AACA,SAASM,SAASA,CAACC,MAAM,EAAE;EACzB,IAAI,aAAaT,KAAK,CAACU,cAAc,CAACD,MAAM,CAAC,IAAI,CAAC,CAAC,EAAER,QAAQ,CAACU,kBAAkB,EAAEF,MAAM,CAAC,IAAI,CAACV,aAAa,CAACU,MAAM,CAAC,EAAE;IACnH,OAAOA,MAAM;EACf;EACA,MAAMG,MAAM,GAAG,CAAC,CAAC;EACjBlB,MAAM,CAACmB,IAAI,CAACJ,MAAM,CAAC,CAACK,OAAO,CAACC,GAAG,IAAI;IACjCH,MAAM,CAACG,GAAG,CAAC,GAAGP,SAAS,CAACC,MAAM,CAACM,GAAG,CAAC,CAAC;EACtC,CAAC,CAAC;EACF,OAAOH,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASd,SAASA,CAACkB,MAAM,EAAEP,MAAM,EAAEQ,OAAO,GAAG;EAC3CC,KAAK,EAAE;AACT,CAAC,EAAE;EACD,MAAMN,MAAM,GAAGK,OAAO,CAACC,KAAK,GAAG;IAC7B,GAAGF;EACL,CAAC,GAAGA,MAAM;EACV,IAAIjB,aAAa,CAACiB,MAAM,CAAC,IAAIjB,aAAa,CAACU,MAAM,CAAC,EAAE;IAClDf,MAAM,CAACmB,IAAI,CAACJ,MAAM,CAAC,CAACK,OAAO,CAACC,GAAG,IAAI;MACjC,IAAI,aAAaf,KAAK,CAACU,cAAc,CAACD,MAAM,CAACM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAEd,QAAQ,CAACU,kBAAkB,EAAEF,MAAM,CAACM,GAAG,CAAC,CAAC,EAAE;QACnGH,MAAM,CAACG,GAAG,CAAC,GAAGN,MAAM,CAACM,GAAG,CAAC;MAC3B,CAAC,MAAM,IAAIhB,aAAa,CAACU,MAAM,CAACM,GAAG,CAAC,CAAC;MACrC;MACArB,MAAM,CAACS,SAAS,CAACgB,cAAc,CAACC,IAAI,CAACJ,MAAM,EAAED,GAAG,CAAC,IAAIhB,aAAa,CAACiB,MAAM,CAACD,GAAG,CAAC,CAAC,EAAE;QAC/E;QACAH,MAAM,CAACG,GAAG,CAAC,GAAGjB,SAAS,CAACkB,MAAM,CAACD,GAAG,CAAC,EAAEN,MAAM,CAACM,GAAG,CAAC,EAAEE,OAAO,CAAC;MAC5D,CAAC,MAAM,IAAIA,OAAO,CAACC,KAAK,EAAE;QACxBN,MAAM,CAACG,GAAG,CAAC,GAAGhB,aAAa,CAACU,MAAM,CAACM,GAAG,CAAC,CAAC,GAAGP,SAAS,CAACC,MAAM,CAACM,GAAG,CAAC,CAAC,GAAGN,MAAM,CAACM,GAAG,CAAC;MACjF,CAAC,MAAM;QACLH,MAAM,CAACG,GAAG,CAAC,GAAGN,MAAM,CAACM,GAAG,CAAC;MAC3B;IACF,CAAC,CAAC;EACJ;EACA,OAAOH,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}